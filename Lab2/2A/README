NAME: Sydney Ng
EMAIL: sydney.ng@yahoo.com
ID: 804794021
SLIPDAYS: 1

Similar to Lab 0, this project will use file descriptors that will either only open/ only write to, execute a command to a specific file descriptor, and possibly print out the commands you’re executing (if the user asks for it). You also can combine these together. Error messages will be printed to the error file descriptor if errors are encountered. In part 1B, we can support all the commands except for --profile. We support more opening/closing options & are able to retrieve the arguments of a command using --wait. In Part 1C, we are adding the ability to use the —-profile option so that you may track the amount of time that it takes to execute a command or it’s children processes. You also will have the ability to see the amount of time that is being spent in the user process. 

Limitations of Code: 
- If you have a process where you close the read/write pipe file descriptors wrong (ex. You call close, but the parent’s write end of the pipe hasn’t been closed yet), your program will hang forever. This was an issue that I ran into when writing the code to pass test case #17. However, if you pass in an argument that closes the file descriptors in the wrong order, there is no catch mechanism to warn you or have a safe failout.

Here are some of the sources that I used while completing this project:
- How to use pipes: https://www.tldp.org/LDP/lpg/node11.html
- How to use getopt: https://www.gnu.org/software/libc/manual/html_node/Getopt-Long-Option-Example.html
- How to use Timeval: https://www.gnu.org/software/libc/manual/html_node/Elapsed-Time.html

